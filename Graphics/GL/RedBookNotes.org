* GLSL
** Data conversions
*** Implicit conversions
| Type   | can be implicitly converted |
|--------+-----------------------------|
| uint   | int                         |
| float  | int, uint                   |
| double | int, uint, float            |

*** Explicit conversions
need to use constructor
ex:
 float f = 10.0
 int ten = int(f);
has int, uint, float, double constructors.


** Aggregate Types
| Basic Type | 2dvec | 3dvec | 4dvec | matrix type             |
|------------+-------+-------+-------+-------------------------|
| float      | vec2  | vec3  | vec4  | mat2,mat3,mat4          |
|            |       |       |       | mat2x2,mat2x3,mat2x4    |
|            |       |       |       | mat3x2,mat3x3,mat3x4    |
|            |       |       |       | mat4x2,mat4x3,mat4x4    |
| double     | dvec2 | dvec3 | dvec4 | dmat2,dmat3,dmat4       |
|            |       |       |       | dmat2x3,dmat2x2,dmat2x4 |
|            |       |       |       | dmat3x3,dmat3x2,dmat3x4 |
|            |       |       |       | dmat4x3,dmat4x2,dmat4x4 |
| int        | ivec2 | ivec3 | ivec4 |                         |
| uint       | uvec2 | uvec3 | uvev4 |                         |
| bool       | bvec2 | bvec3 | bvec4 |                         |
|            |       |       |       |                         |
*** Convert between types 
we can convert between types using constructor
#+begin_src C
vec3 vel = vec3(0.0, 0.2, 3.0);
ivec3 steps = ivec3(vel);

vec4 color;
vec3 rgb = vec3(color);

vec3 white = vec3(1.0);
vec4 transcluent = vec4(white, 0.5);
#+end_src
*** Accessing elements of vectors and matrices
**** Vector Elements
vector can be accesed by two methods
***** Components
within any of given sets
(x,y,z,w) -> Positions
(r,g,b,a) -> Colors
(s,t,p,q) -> Texture coordinates.

#+begin_src C
vec3 color = vec3(1.0); //white
float red = color.r;
//swizzle
vec3 swizle = color.rrr;
vec3 wtf = color.bgr;
//Error
vec2 2d = vec2(1.0, 2.0);
float z = 2d.z //cannot access beyond types

vec2 2d = vec2(1.0, 2.0);
vec2 col = 2d.xg; //cannot mix between sets.
#+end_src

***** Array elements

#+begin_src C
vec2 2d = vec2(1.0, 2.0);
float x = 2d[0]; //same as 2d.x;
float y = 2d[1]; //same as 2d.y;
#+end_src



**** Matrix Elements
matrix elements  can be accessed by array notation
#+begin_src C
mat4 m = mat4(1.0); //identity matrix
vec4 x = m[0];
float x1 = m[0][0];
#+end_src

** Structures
1. implicitly defines constructor
#+begin_src C
struct Particle
{
  float lifetime;
  vec3  position;
  vec3  velocity;
};
Particle p = Particle(10.0, pos, vel);
#+end_src
** Arrays
1. GLSL 4.3 allows to create arrays of arrays (multidim array)
1. in GLSL 4.2 <=  
     arrays of arrays not allowed (so no multidim array).

ex:
 #+begin_src C
 float coeff[3] = float[3] coeff
 int indi[]; //unsized array, redclare latter with size;
 float coff[3] = float[3](1.0,2.0,3.0); //has constructors
 int l = coff.length(); //has inbuild type lenght mostly compile time 
 //but only with stored buffer objects such as 
 buffer buf[]; //buf.length() only known in runtime. rest everything 
               //compile time
 

  mat4 m = mat4(1.0);
  int col = m.length();
  int row = m[0].length();
 #+end_src   
** Storage Qualifiers
*** const
Readonly compile-time constant.
*** in
input to shader
such as vertex attributes.
*** out
output from shader stage
ex: transformed homogeneous cordinates <- vertex shader
    fragment color <- fragment shader
*** uniform
 Shader cannot write uniform values only application can write into it.
#+begin_src C
GLint   timeLoc;
GLfloat timeVal;

timeLoc = glGetUniformLocation(program, "time");
timeVal = 30.0f;
glUniformf(timeLoc, timeVal);
#+end_src
*** buffer
can be written by shader , works like uniform
*** shared
compute shader related.

** Operators.
 1. Matrix multiplication is not communicative.
 2. discard keyword works in fragment shader.
** Functions
 function name can not begin with
  1. numbers
  2. gl_ 
*** Parameter Qualifiers
| Access Modifier | Desc                                           |
|-----------------+------------------------------------------------|
| in              | value copied into fn (default if not specified |
| const in        | read only value copied into fn                 |
| out             | value copied out of fn                         |
| inout           | value copied in and out of fn                  |
*** Computational Invariance
 1. GLSL does not guarantee that two identical computations in
    different shaders will result in excatly the same value.
    (this may happen in cpu also due to optimization etc..)
    This  may be problem with multi pass algorithms.
    we call this invariance.
 2. In below case even GLSL invairance,precise keywords don not help.
    #+begin_src C
     uniform float ten; //app sets this to 10.0
     const float f = sin(10.0); //computed in compiler host
     float g = sin(ten); //computed on graphics device
   
     void main()
     {
        if (f==g) //f and g might not be equal.
          ;
     } 
    #+end_src
 GLSL has two methods dealing with invariance,
**** invariant
1. may be applied to any shader output variable.
2. It guarantee 
    if ( same expressions && same values) with invariant qualifier
       will compute same value.
3. Can be set to user defined varialble or built in variable.
4. for debugging we can apply invariant to all vars with
  #pragma STDGL invariant(all)
5. may decrese the performance. disables optimization by glsl.
     
**** precise
   
